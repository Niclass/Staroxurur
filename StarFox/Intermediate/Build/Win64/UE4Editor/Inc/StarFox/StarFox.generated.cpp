// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "StarFox.h"
#include "StarFox.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeStarFox() {}
	void ACrosshair::StaticRegisterNativesACrosshair()
	{
	}
	IMPLEMENT_CLASS(ACrosshair, 1166946275);
	void APawnWithCamera::StaticRegisterNativesAPawnWithCamera()
	{
	}
	IMPLEMENT_CLASS(APawnWithCamera, 1994524780);
	void AStarFoxGameMode::StaticRegisterNativesAStarFoxGameMode()
	{
	}
	IMPLEMENT_CLASS(AStarFoxGameMode, 3441142937);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();

	STARFOX_API class UClass* Z_Construct_UClass_ACrosshair_NoRegister();
	STARFOX_API class UClass* Z_Construct_UClass_ACrosshair();
	STARFOX_API class UClass* Z_Construct_UClass_APawnWithCamera_NoRegister();
	STARFOX_API class UClass* Z_Construct_UClass_APawnWithCamera();
	STARFOX_API class UClass* Z_Construct_UClass_AStarFoxGameMode_NoRegister();
	STARFOX_API class UClass* Z_Construct_UClass_AStarFoxGameMode();
	STARFOX_API class UPackage* Z_Construct_UPackage_StarFox();
	UClass* Z_Construct_UClass_ACrosshair_NoRegister()
	{
		return ACrosshair::StaticClass();
	}
	UClass* Z_Construct_UClass_ACrosshair()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage_StarFox();
			OuterClass = ACrosshair::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Crosshair.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Crosshair.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ACrosshair(Z_Construct_UClass_ACrosshair, TEXT("ACrosshair"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ACrosshair);
	UClass* Z_Construct_UClass_APawnWithCamera_NoRegister()
	{
		return APawnWithCamera::StaticClass();
	}
	UClass* Z_Construct_UClass_APawnWithCamera()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APawn();
			Z_Construct_UPackage_StarFox();
			OuterClass = APawnWithCamera::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurrentForwardSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentForwardSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentForwardSpeed, APawnWithCamera), 0x0000000000000001);
				UProperty* NewProp_MinSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinSpeed, APawnWithCamera), 0x0000000000000001);
				UProperty* NewProp_MaxSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxSpeed, APawnWithCamera), 0x0000000000000001);
				UProperty* NewProp_TurnSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TurnSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TurnSpeed, APawnWithCamera), 0x0000000000000001);
				UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Acceleration, APawnWithCamera), 0x0000000000000001);
				UProperty* NewProp_CollisionSphere = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionSphere"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionSphere, APawnWithCamera), 0x0000080000080009, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_OurCamera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OurCamera"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OurCamera, APawnWithCamera), 0x0000080000080009, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_OurCameraSpringArm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OurCameraSpringArm"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OurCameraSpringArm, APawnWithCamera), 0x0000080000080009, Z_Construct_UClass_USpringArmComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_CurrentForwardSpeed, TEXT("Category"), TEXT("PawnWithCamera"));
				MetaData->SetValue(NewProp_CurrentForwardSpeed, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_CurrentForwardSpeed, TEXT("ToolTip"), TEXT("Current forward speed"));
				MetaData->SetValue(NewProp_MinSpeed, TEXT("Category"), TEXT("Yaw"));
				MetaData->SetValue(NewProp_MinSpeed, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_MinSpeed, TEXT("ToolTip"), TEXT("Min forward speed"));
				MetaData->SetValue(NewProp_MaxSpeed, TEXT("Category"), TEXT("Pitch"));
				MetaData->SetValue(NewProp_MaxSpeed, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_MaxSpeed, TEXT("ToolTip"), TEXT("Max forward speed"));
				MetaData->SetValue(NewProp_TurnSpeed, TEXT("Category"), TEXT("Plane"));
				MetaData->SetValue(NewProp_TurnSpeed, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_TurnSpeed, TEXT("ToolTip"), TEXT("How quickly pawn can steer"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("Plane"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ToolTip"), TEXT("How quickly forward speed changes"));
				MetaData->SetValue(NewProp_CollisionSphere, TEXT("Category"), TEXT("PawnWithCamera"));
				MetaData->SetValue(NewProp_CollisionSphere, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionSphere, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_OurCamera, TEXT("Category"), TEXT("PawnWithCamera"));
				MetaData->SetValue(NewProp_OurCamera, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_OurCamera, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
				MetaData->SetValue(NewProp_OurCameraSpringArm, TEXT("Category"), TEXT("PawnWithCamera"));
				MetaData->SetValue(NewProp_OurCameraSpringArm, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_OurCameraSpringArm, TEXT("ModuleRelativePath"), TEXT("PawnWithCamera.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APawnWithCamera(Z_Construct_UClass_APawnWithCamera, TEXT("APawnWithCamera"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(APawnWithCamera);
	UClass* Z_Construct_UClass_AStarFoxGameMode_NoRegister()
	{
		return AStarFoxGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AStarFoxGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_StarFox();
			OuterClass = AStarFoxGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("StarFoxGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("StarFoxGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AStarFoxGameMode(Z_Construct_UClass_AStarFoxGameMode, TEXT("AStarFoxGameMode"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AStarFoxGameMode);
	UPackage* Z_Construct_UPackage_StarFox()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/StarFox")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x4A7E7624;
			Guid.B = 0xCFFC610D;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
